# Объявим функцию с тремя именованными параметрами
def print_params(a = 1, b = 'Python', c = True):
    print(a, b, c)

# Попробуем вызвать объявленную функцию без параметров
print_params()

# Как видим вызов функции с именованными параметрами возможен без указания
# самих параметров. Функция подтянет не указанные параметры
# Теперь попробуем вызвать функцию с одним указанным параметром
# Для чистоты эксперемента изменим типы вызываемых параметров
print_params(a = {'key_1': [1, 7, 8]})
print_params(b = 25)
print_params(c = [1, 2, 3])

# Как видим изменение типа данных именнованых параметров возможно
# Тепрь вызовем функцию просто с произвольным типом без указания имен переменных
print_params('bash', False, 28)

# Теперь вызовем функцию указав именованные параметры не в том порядке, который
# который указан при создании
print_params(b = 25, a = {'key_1': [1, 7, 8]}, c = (1, 68, 33))

# Как видим не имеет занчения порядок передачи именованных переменных. Функция
# расставит переменные в том порядке в котором они объявлены
# Если мы попробуем передать переменную с именем которое не объвлено
# Или количество переменных БОЛЬШЕ чкм принимает функция то будет выдана ошибка

# Дальше идет код который вызывает ошибки
#print_params(k = 17, s = [24, 7], m = False) # Другие имена

# Дальше идет код который вызывает ошибки
#print_params('Python', 590, True, {'key': 24}) # Количество превышено

# Как видми выданы сообщения о ошибках
# Теперь создадим переменную типа list
values_list = [[1, 3, 7], (7, 4, 21), {'key_1': 17, 'key_2': [39, 556]}]
# Вызовем функцию
print_params(values_list)

# Как видим на позицию a встала переменная values_list остальные переменные
# b и c подтянулись и функции
# Теперь при вызове функции используем методы распаковки
print_params(*values_list)

# Как видим элементы переменной values_list встали на места a, b и с
# Создадим словарь с тремя ключами
values_dict = {'key_0': 'Python', 'key_1': True, 'key_2': [1, 2, 3]}
# Вызовем функцию
print_params(values_dict)

# Как видим словарь встал на место переменной а переменные b и c подтянулись из
# функции. Теперь попробуем применить распаковку
print_params(*values_dict)

# Дальше идет код который вызывает ошибки
# Теперь попробуем распаковку **kwargs
#print_params(**values_dict)

# ошибка связана с тем что в объявленной функции нет переменных key_0, key_1, key_2
# Если в словаре измнить ключи
values_dict = {'a': 'Python', 'b': True, 'c': [1, 2, 3]}
# Теперь при вызове
print_params(**values_dict)

# Все прошло штатно. Теперь создадим список с двумя элементами и при вызове
# с распаковкой недостающий праметр
values_list_2 = [6734, 'C#']
print_params(*values_list_2, 'Привет я третий параметр')

# Как видим опять все отработало штотно